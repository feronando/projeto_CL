// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2022 08:47:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    projeto_CL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module projeto_CL_vlg_sample_tst(
	clk,
	clr,
	IN_East,
	IN_North,
	IN_South,
	IN_West,
	sampler_tx
);
input  clk;
input  clr;
input [7:0] IN_East;
input [7:0] IN_North;
input [7:0] IN_South;
input [7:0] IN_West;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or IN_East or IN_North or IN_South or IN_West)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module projeto_CL_vlg_check_tst (
	OUT_East1,
	OUT_East2,
	OUT_North1,
	OUT_North2,
	OUT_South1,
	OUT_South2,
	OUT_West1,
	OUT_West2,
	sampler_rx
);
input [3:0] OUT_East1;
input [3:0] OUT_East2;
input [3:0] OUT_North1;
input [3:0] OUT_North2;
input [3:0] OUT_South1;
input [3:0] OUT_South2;
input [3:0] OUT_West1;
input [3:0] OUT_West2;
input sampler_rx;

reg [3:0] OUT_East1_expected;
reg [3:0] OUT_East2_expected;
reg [3:0] OUT_North1_expected;
reg [3:0] OUT_North2_expected;
reg [3:0] OUT_South1_expected;
reg [3:0] OUT_South2_expected;
reg [3:0] OUT_West1_expected;
reg [3:0] OUT_West2_expected;

reg [3:0] OUT_East1_prev;
reg [3:0] OUT_East2_prev;
reg [3:0] OUT_North1_prev;
reg [3:0] OUT_North2_prev;
reg [3:0] OUT_South1_prev;
reg [3:0] OUT_South2_prev;
reg [3:0] OUT_West1_prev;
reg [3:0] OUT_West2_prev;

reg [3:0] OUT_East1_expected_prev;
reg [3:0] OUT_East2_expected_prev;
reg [3:0] OUT_North1_expected_prev;
reg [3:0] OUT_North2_expected_prev;
reg [3:0] OUT_South1_expected_prev;
reg [3:0] OUT_South2_expected_prev;
reg [3:0] OUT_West1_expected_prev;
reg [3:0] OUT_West2_expected_prev;

reg [3:0] last_OUT_East1_exp;
reg [3:0] last_OUT_East2_exp;
reg [3:0] last_OUT_North1_exp;
reg [3:0] last_OUT_North2_exp;
reg [3:0] last_OUT_South1_exp;
reg [3:0] last_OUT_South2_exp;
reg [3:0] last_OUT_West1_exp;
reg [3:0] last_OUT_West2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_East1_prev = OUT_East1;
	OUT_East2_prev = OUT_East2;
	OUT_North1_prev = OUT_North1;
	OUT_North2_prev = OUT_North2;
	OUT_South1_prev = OUT_South1;
	OUT_South2_prev = OUT_South2;
	OUT_West1_prev = OUT_West1;
	OUT_West2_prev = OUT_West2;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_East1_expected_prev = OUT_East1_expected;
	OUT_East2_expected_prev = OUT_East2_expected;
	OUT_North1_expected_prev = OUT_North1_expected;
	OUT_North2_expected_prev = OUT_North2_expected;
	OUT_South1_expected_prev = OUT_South1_expected;
	OUT_South2_expected_prev = OUT_South2_expected;
	OUT_West1_expected_prev = OUT_West1_expected;
	OUT_West2_expected_prev = OUT_West2_expected;
end


// expected OUT_East1[ 3 ]
initial
begin
	OUT_East1_expected[3] = 1'bX;
end 
// expected OUT_East1[ 2 ]
initial
begin
	OUT_East1_expected[2] = 1'bX;
end 
// expected OUT_East1[ 1 ]
initial
begin
	OUT_East1_expected[1] = 1'bX;
end 
// expected OUT_East1[ 0 ]
initial
begin
	OUT_East1_expected[0] = 1'bX;
end 
// expected OUT_East2[ 3 ]
initial
begin
	OUT_East2_expected[3] = 1'bX;
end 
// expected OUT_East2[ 2 ]
initial
begin
	OUT_East2_expected[2] = 1'bX;
end 
// expected OUT_East2[ 1 ]
initial
begin
	OUT_East2_expected[1] = 1'bX;
end 
// expected OUT_East2[ 0 ]
initial
begin
	OUT_East2_expected[0] = 1'bX;
end 
// expected OUT_North1[ 3 ]
initial
begin
	OUT_North1_expected[3] = 1'bX;
end 
// expected OUT_North1[ 2 ]
initial
begin
	OUT_North1_expected[2] = 1'bX;
end 
// expected OUT_North1[ 1 ]
initial
begin
	OUT_North1_expected[1] = 1'bX;
end 
// expected OUT_North1[ 0 ]
initial
begin
	OUT_North1_expected[0] = 1'bX;
end 
// expected OUT_North2[ 3 ]
initial
begin
	OUT_North2_expected[3] = 1'bX;
end 
// expected OUT_North2[ 2 ]
initial
begin
	OUT_North2_expected[2] = 1'bX;
end 
// expected OUT_North2[ 1 ]
initial
begin
	OUT_North2_expected[1] = 1'bX;
end 
// expected OUT_North2[ 0 ]
initial
begin
	OUT_North2_expected[0] = 1'bX;
end 
// expected OUT_South1[ 3 ]
initial
begin
	OUT_South1_expected[3] = 1'bX;
end 
// expected OUT_South1[ 2 ]
initial
begin
	OUT_South1_expected[2] = 1'bX;
end 
// expected OUT_South1[ 1 ]
initial
begin
	OUT_South1_expected[1] = 1'bX;
end 
// expected OUT_South1[ 0 ]
initial
begin
	OUT_South1_expected[0] = 1'bX;
end 
// expected OUT_South2[ 3 ]
initial
begin
	OUT_South2_expected[3] = 1'bX;
end 
// expected OUT_South2[ 2 ]
initial
begin
	OUT_South2_expected[2] = 1'bX;
end 
// expected OUT_South2[ 1 ]
initial
begin
	OUT_South2_expected[1] = 1'bX;
end 
// expected OUT_South2[ 0 ]
initial
begin
	OUT_South2_expected[0] = 1'bX;
end 
// expected OUT_West1[ 3 ]
initial
begin
	OUT_West1_expected[3] = 1'bX;
end 
// expected OUT_West1[ 2 ]
initial
begin
	OUT_West1_expected[2] = 1'bX;
end 
// expected OUT_West1[ 1 ]
initial
begin
	OUT_West1_expected[1] = 1'bX;
end 
// expected OUT_West1[ 0 ]
initial
begin
	OUT_West1_expected[0] = 1'bX;
end 
// expected OUT_West2[ 3 ]
initial
begin
	OUT_West2_expected[3] = 1'bX;
end 
// expected OUT_West2[ 2 ]
initial
begin
	OUT_West2_expected[2] = 1'bX;
end 
// expected OUT_West2[ 1 ]
initial
begin
	OUT_West2_expected[1] = 1'bX;
end 
// expected OUT_West2[ 0 ]
initial
begin
	OUT_West2_expected[0] = 1'bX;
end 
// generate trigger
always @(OUT_East1_expected or OUT_East1 or OUT_East2_expected or OUT_East2 or OUT_North1_expected or OUT_North1 or OUT_North2_expected or OUT_North2 or OUT_South1_expected or OUT_South1 or OUT_South2_expected or OUT_South2 or OUT_West1_expected or OUT_West1 or OUT_West2_expected or OUT_West2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT_East1 = %b | expected OUT_East2 = %b | expected OUT_North1 = %b | expected OUT_North2 = %b | expected OUT_South1 = %b | expected OUT_South2 = %b | expected OUT_West1 = %b | expected OUT_West2 = %b | ",OUT_East1_expected_prev,OUT_East2_expected_prev,OUT_North1_expected_prev,OUT_North2_expected_prev,OUT_South1_expected_prev,OUT_South2_expected_prev,OUT_West1_expected_prev,OUT_West2_expected_prev);
	$display("| real OUT_East1 = %b | real OUT_East2 = %b | real OUT_North1 = %b | real OUT_North2 = %b | real OUT_South1 = %b | real OUT_South2 = %b | real OUT_West1 = %b | real OUT_West2 = %b | ",OUT_East1_prev,OUT_East2_prev,OUT_North1_prev,OUT_North2_prev,OUT_South1_prev,OUT_South2_prev,OUT_West1_prev,OUT_West2_prev);
`endif
	if (
		( OUT_East1_expected_prev[0] !== 1'bx ) && ( OUT_East1_prev[0] !== OUT_East1_expected_prev[0] )
		&& ((OUT_East1_expected_prev[0] !== last_OUT_East1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East1_expected_prev);
		$display ("     Real value = %b", OUT_East1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_East1_exp[0] = OUT_East1_expected_prev[0];
	end
	if (
		( OUT_East1_expected_prev[1] !== 1'bx ) && ( OUT_East1_prev[1] !== OUT_East1_expected_prev[1] )
		&& ((OUT_East1_expected_prev[1] !== last_OUT_East1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East1_expected_prev);
		$display ("     Real value = %b", OUT_East1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_East1_exp[1] = OUT_East1_expected_prev[1];
	end
	if (
		( OUT_East1_expected_prev[2] !== 1'bx ) && ( OUT_East1_prev[2] !== OUT_East1_expected_prev[2] )
		&& ((OUT_East1_expected_prev[2] !== last_OUT_East1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East1_expected_prev);
		$display ("     Real value = %b", OUT_East1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_East1_exp[2] = OUT_East1_expected_prev[2];
	end
	if (
		( OUT_East1_expected_prev[3] !== 1'bx ) && ( OUT_East1_prev[3] !== OUT_East1_expected_prev[3] )
		&& ((OUT_East1_expected_prev[3] !== last_OUT_East1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East1_expected_prev);
		$display ("     Real value = %b", OUT_East1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_East1_exp[3] = OUT_East1_expected_prev[3];
	end
	if (
		( OUT_East2_expected_prev[0] !== 1'bx ) && ( OUT_East2_prev[0] !== OUT_East2_expected_prev[0] )
		&& ((OUT_East2_expected_prev[0] !== last_OUT_East2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East2_expected_prev);
		$display ("     Real value = %b", OUT_East2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_East2_exp[0] = OUT_East2_expected_prev[0];
	end
	if (
		( OUT_East2_expected_prev[1] !== 1'bx ) && ( OUT_East2_prev[1] !== OUT_East2_expected_prev[1] )
		&& ((OUT_East2_expected_prev[1] !== last_OUT_East2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East2_expected_prev);
		$display ("     Real value = %b", OUT_East2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_East2_exp[1] = OUT_East2_expected_prev[1];
	end
	if (
		( OUT_East2_expected_prev[2] !== 1'bx ) && ( OUT_East2_prev[2] !== OUT_East2_expected_prev[2] )
		&& ((OUT_East2_expected_prev[2] !== last_OUT_East2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East2_expected_prev);
		$display ("     Real value = %b", OUT_East2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_East2_exp[2] = OUT_East2_expected_prev[2];
	end
	if (
		( OUT_East2_expected_prev[3] !== 1'bx ) && ( OUT_East2_prev[3] !== OUT_East2_expected_prev[3] )
		&& ((OUT_East2_expected_prev[3] !== last_OUT_East2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_East2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_East2_expected_prev);
		$display ("     Real value = %b", OUT_East2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_OUT_East2_exp[3] = OUT_East2_expected_prev[3];
	end
	if (
		( OUT_North1_expected_prev[0] !== 1'bx ) && ( OUT_North1_prev[0] !== OUT_North1_expected_prev[0] )
		&& ((OUT_North1_expected_prev[0] !== last_OUT_North1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North1_expected_prev);
		$display ("     Real value = %b", OUT_North1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_North1_exp[0] = OUT_North1_expected_prev[0];
	end
	if (
		( OUT_North1_expected_prev[1] !== 1'bx ) && ( OUT_North1_prev[1] !== OUT_North1_expected_prev[1] )
		&& ((OUT_North1_expected_prev[1] !== last_OUT_North1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North1_expected_prev);
		$display ("     Real value = %b", OUT_North1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_North1_exp[1] = OUT_North1_expected_prev[1];
	end
	if (
		( OUT_North1_expected_prev[2] !== 1'bx ) && ( OUT_North1_prev[2] !== OUT_North1_expected_prev[2] )
		&& ((OUT_North1_expected_prev[2] !== last_OUT_North1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North1_expected_prev);
		$display ("     Real value = %b", OUT_North1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_North1_exp[2] = OUT_North1_expected_prev[2];
	end
	if (
		( OUT_North1_expected_prev[3] !== 1'bx ) && ( OUT_North1_prev[3] !== OUT_North1_expected_prev[3] )
		&& ((OUT_North1_expected_prev[3] !== last_OUT_North1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North1_expected_prev);
		$display ("     Real value = %b", OUT_North1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_North1_exp[3] = OUT_North1_expected_prev[3];
	end
	if (
		( OUT_North2_expected_prev[0] !== 1'bx ) && ( OUT_North2_prev[0] !== OUT_North2_expected_prev[0] )
		&& ((OUT_North2_expected_prev[0] !== last_OUT_North2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North2_expected_prev);
		$display ("     Real value = %b", OUT_North2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_North2_exp[0] = OUT_North2_expected_prev[0];
	end
	if (
		( OUT_North2_expected_prev[1] !== 1'bx ) && ( OUT_North2_prev[1] !== OUT_North2_expected_prev[1] )
		&& ((OUT_North2_expected_prev[1] !== last_OUT_North2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North2_expected_prev);
		$display ("     Real value = %b", OUT_North2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_North2_exp[1] = OUT_North2_expected_prev[1];
	end
	if (
		( OUT_North2_expected_prev[2] !== 1'bx ) && ( OUT_North2_prev[2] !== OUT_North2_expected_prev[2] )
		&& ((OUT_North2_expected_prev[2] !== last_OUT_North2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North2_expected_prev);
		$display ("     Real value = %b", OUT_North2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_North2_exp[2] = OUT_North2_expected_prev[2];
	end
	if (
		( OUT_North2_expected_prev[3] !== 1'bx ) && ( OUT_North2_prev[3] !== OUT_North2_expected_prev[3] )
		&& ((OUT_North2_expected_prev[3] !== last_OUT_North2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_North2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_North2_expected_prev);
		$display ("     Real value = %b", OUT_North2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_OUT_North2_exp[3] = OUT_North2_expected_prev[3];
	end
	if (
		( OUT_South1_expected_prev[0] !== 1'bx ) && ( OUT_South1_prev[0] !== OUT_South1_expected_prev[0] )
		&& ((OUT_South1_expected_prev[0] !== last_OUT_South1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South1_expected_prev);
		$display ("     Real value = %b", OUT_South1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_South1_exp[0] = OUT_South1_expected_prev[0];
	end
	if (
		( OUT_South1_expected_prev[1] !== 1'bx ) && ( OUT_South1_prev[1] !== OUT_South1_expected_prev[1] )
		&& ((OUT_South1_expected_prev[1] !== last_OUT_South1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South1_expected_prev);
		$display ("     Real value = %b", OUT_South1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_South1_exp[1] = OUT_South1_expected_prev[1];
	end
	if (
		( OUT_South1_expected_prev[2] !== 1'bx ) && ( OUT_South1_prev[2] !== OUT_South1_expected_prev[2] )
		&& ((OUT_South1_expected_prev[2] !== last_OUT_South1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South1_expected_prev);
		$display ("     Real value = %b", OUT_South1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_South1_exp[2] = OUT_South1_expected_prev[2];
	end
	if (
		( OUT_South1_expected_prev[3] !== 1'bx ) && ( OUT_South1_prev[3] !== OUT_South1_expected_prev[3] )
		&& ((OUT_South1_expected_prev[3] !== last_OUT_South1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South1_expected_prev);
		$display ("     Real value = %b", OUT_South1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_South1_exp[3] = OUT_South1_expected_prev[3];
	end
	if (
		( OUT_South2_expected_prev[0] !== 1'bx ) && ( OUT_South2_prev[0] !== OUT_South2_expected_prev[0] )
		&& ((OUT_South2_expected_prev[0] !== last_OUT_South2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South2_expected_prev);
		$display ("     Real value = %b", OUT_South2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_South2_exp[0] = OUT_South2_expected_prev[0];
	end
	if (
		( OUT_South2_expected_prev[1] !== 1'bx ) && ( OUT_South2_prev[1] !== OUT_South2_expected_prev[1] )
		&& ((OUT_South2_expected_prev[1] !== last_OUT_South2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South2_expected_prev);
		$display ("     Real value = %b", OUT_South2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_South2_exp[1] = OUT_South2_expected_prev[1];
	end
	if (
		( OUT_South2_expected_prev[2] !== 1'bx ) && ( OUT_South2_prev[2] !== OUT_South2_expected_prev[2] )
		&& ((OUT_South2_expected_prev[2] !== last_OUT_South2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South2_expected_prev);
		$display ("     Real value = %b", OUT_South2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_South2_exp[2] = OUT_South2_expected_prev[2];
	end
	if (
		( OUT_South2_expected_prev[3] !== 1'bx ) && ( OUT_South2_prev[3] !== OUT_South2_expected_prev[3] )
		&& ((OUT_South2_expected_prev[3] !== last_OUT_South2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_South2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_South2_expected_prev);
		$display ("     Real value = %b", OUT_South2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OUT_South2_exp[3] = OUT_South2_expected_prev[3];
	end
	if (
		( OUT_West1_expected_prev[0] !== 1'bx ) && ( OUT_West1_prev[0] !== OUT_West1_expected_prev[0] )
		&& ((OUT_West1_expected_prev[0] !== last_OUT_West1_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West1_expected_prev);
		$display ("     Real value = %b", OUT_West1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OUT_West1_exp[0] = OUT_West1_expected_prev[0];
	end
	if (
		( OUT_West1_expected_prev[1] !== 1'bx ) && ( OUT_West1_prev[1] !== OUT_West1_expected_prev[1] )
		&& ((OUT_West1_expected_prev[1] !== last_OUT_West1_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West1_expected_prev);
		$display ("     Real value = %b", OUT_West1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OUT_West1_exp[1] = OUT_West1_expected_prev[1];
	end
	if (
		( OUT_West1_expected_prev[2] !== 1'bx ) && ( OUT_West1_prev[2] !== OUT_West1_expected_prev[2] )
		&& ((OUT_West1_expected_prev[2] !== last_OUT_West1_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West1_expected_prev);
		$display ("     Real value = %b", OUT_West1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OUT_West1_exp[2] = OUT_West1_expected_prev[2];
	end
	if (
		( OUT_West1_expected_prev[3] !== 1'bx ) && ( OUT_West1_prev[3] !== OUT_West1_expected_prev[3] )
		&& ((OUT_West1_expected_prev[3] !== last_OUT_West1_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West1_expected_prev);
		$display ("     Real value = %b", OUT_West1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OUT_West1_exp[3] = OUT_West1_expected_prev[3];
	end
	if (
		( OUT_West2_expected_prev[0] !== 1'bx ) && ( OUT_West2_prev[0] !== OUT_West2_expected_prev[0] )
		&& ((OUT_West2_expected_prev[0] !== last_OUT_West2_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West2_expected_prev);
		$display ("     Real value = %b", OUT_West2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_West2_exp[0] = OUT_West2_expected_prev[0];
	end
	if (
		( OUT_West2_expected_prev[1] !== 1'bx ) && ( OUT_West2_prev[1] !== OUT_West2_expected_prev[1] )
		&& ((OUT_West2_expected_prev[1] !== last_OUT_West2_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West2_expected_prev);
		$display ("     Real value = %b", OUT_West2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_West2_exp[1] = OUT_West2_expected_prev[1];
	end
	if (
		( OUT_West2_expected_prev[2] !== 1'bx ) && ( OUT_West2_prev[2] !== OUT_West2_expected_prev[2] )
		&& ((OUT_West2_expected_prev[2] !== last_OUT_West2_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West2_expected_prev);
		$display ("     Real value = %b", OUT_West2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_West2_exp[2] = OUT_West2_expected_prev[2];
	end
	if (
		( OUT_West2_expected_prev[3] !== 1'bx ) && ( OUT_West2_prev[3] !== OUT_West2_expected_prev[3] )
		&& ((OUT_West2_expected_prev[3] !== last_OUT_West2_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_West2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_West2_expected_prev);
		$display ("     Real value = %b", OUT_West2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_West2_exp[3] = OUT_West2_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#64000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module projeto_CL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [7:0] IN_East;
reg [7:0] IN_North;
reg [7:0] IN_South;
reg [7:0] IN_West;
// wires                                               
wire [3:0] OUT_East1;
wire [3:0] OUT_East2;
wire [3:0] OUT_North1;
wire [3:0] OUT_North2;
wire [3:0] OUT_South1;
wire [3:0] OUT_South2;
wire [3:0] OUT_West1;
wire [3:0] OUT_West2;

wire sampler;                             

// assign statements (if any)                          
projeto_CL i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.IN_East(IN_East),
	.IN_North(IN_North),
	.IN_South(IN_South),
	.IN_West(IN_West),
	.OUT_East1(OUT_East1),
	.OUT_East2(OUT_East2),
	.OUT_North1(OUT_North1),
	.OUT_North2(OUT_North2),
	.OUT_South1(OUT_South1),
	.OUT_South2(OUT_South2),
	.OUT_West1(OUT_West1),
	.OUT_West2(OUT_West2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #2000 1'b1;
	#2000;
end 

// clr
initial
begin
	clr = 1'b0;
end 
// IN_East[ 7 ]
initial
begin
	IN_East[7] = 1'b0;
end 
// IN_East[ 6 ]
initial
begin
	IN_East[6] = 1'b0;
end 
// IN_East[ 5 ]
initial
begin
	IN_East[5] = 1'b0;
end 
// IN_East[ 4 ]
initial
begin
	IN_East[4] = 1'b0;
end 
// IN_East[ 3 ]
initial
begin
	IN_East[3] = 1'b0;
end 
// IN_East[ 2 ]
initial
begin
	IN_East[2] = 1'b0;
	IN_East[2] = #30000 1'b1;
end 
// IN_East[ 1 ]
initial
begin
	IN_East[1] = 1'b0;
	IN_East[1] = #10000 1'b1;
	IN_East[1] = #20000 1'b0;
	IN_East[1] = #20000 1'b1;
end 
// IN_East[ 0 ]
initial
begin
	repeat(3)
	begin
		IN_East[0] = 1'b1;
		IN_East[0] = #10000 1'b0;
		# 10000;
	end
	IN_East[0] = 1'b1;
end 
// IN_West[ 7 ]
initial
begin
	IN_West[7] = 1'b0;
end 
// IN_West[ 6 ]
initial
begin
	IN_West[6] = 1'b0;
end 
// IN_West[ 5 ]
initial
begin
	IN_West[5] = 1'b0;
end 
// IN_West[ 4 ]
initial
begin
	IN_West[4] = 1'b0;
end 
// IN_West[ 3 ]
initial
begin
	IN_West[3] = 1'b1;
end 
// IN_West[ 2 ]
initial
begin
	IN_West[2] = 1'b0;
	IN_West[2] = #40000 1'b1;
end 
// IN_West[ 1 ]
initial
begin
	IN_West[1] = 1'b0;
	IN_West[1] = #20000 1'b1;
	IN_West[1] = #20000 1'b0;
	IN_West[1] = #20000 1'b1;
end 
// IN_West[ 0 ]
initial
begin
	repeat(3)
	begin
		IN_West[0] = 1'b0;
		IN_West[0] = #10000 1'b1;
		# 10000;
	end
	IN_West[0] = 1'b0;
end 
// IN_South[ 7 ]
initial
begin
	IN_South[7] = 1'b0;
end 
// IN_South[ 6 ]
initial
begin
	IN_South[6] = 1'b0;
end 
// IN_South[ 5 ]
initial
begin
	IN_South[5] = 1'b0;
end 
// IN_South[ 4 ]
initial
begin
	IN_South[4] = 1'b1;
end 
// IN_South[ 3 ]
initial
begin
	IN_South[3] = 1'b0;
end 
// IN_South[ 2 ]
initial
begin
	IN_South[2] = 1'b0;
	IN_South[2] = #40000 1'b1;
end 
// IN_South[ 1 ]
initial
begin
	IN_South[1] = 1'b0;
	IN_South[1] = #20000 1'b1;
	IN_South[1] = #20000 1'b0;
	IN_South[1] = #20000 1'b1;
end 
// IN_South[ 0 ]
initial
begin
	repeat(3)
	begin
		IN_South[0] = 1'b0;
		IN_South[0] = #10000 1'b1;
		# 10000;
	end
	IN_South[0] = 1'b0;
end 
// IN_North[ 7 ]
initial
begin
	IN_North[7] = 1'b0;
end 
// IN_North[ 6 ]
initial
begin
	IN_North[6] = 1'b0;
end 
// IN_North[ 5 ]
initial
begin
	IN_North[5] = 1'b0;
end 
// IN_North[ 4 ]
initial
begin
	IN_North[4] = 1'b1;
end 
// IN_North[ 3 ]
initial
begin
	IN_North[3] = 1'b1;
end 
// IN_North[ 2 ]
initial
begin
	IN_North[2] = 1'b0;
	IN_North[2] = #40000 1'b1;
end 
// IN_North[ 1 ]
initial
begin
	IN_North[1] = 1'b0;
	IN_North[1] = #20000 1'b1;
	IN_North[1] = #20000 1'b0;
	IN_North[1] = #20000 1'b1;
end 
// IN_North[ 0 ]
initial
begin
	repeat(3)
	begin
		IN_North[0] = 1'b0;
		IN_North[0] = #10000 1'b1;
		# 10000;
	end
	IN_North[0] = 1'b0;
end 

projeto_CL_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.IN_East(IN_East),
	.IN_North(IN_North),
	.IN_South(IN_South),
	.IN_West(IN_West),
	.sampler_tx(sampler)
);

projeto_CL_vlg_check_tst tb_out(
	.OUT_East1(OUT_East1),
	.OUT_East2(OUT_East2),
	.OUT_North1(OUT_North1),
	.OUT_North2(OUT_North2),
	.OUT_South1(OUT_South1),
	.OUT_South2(OUT_South2),
	.OUT_West1(OUT_West1),
	.OUT_West2(OUT_West2),
	.sampler_rx(sampler)
);
endmodule

